#!groovy

def expectedBuckets = 2
def lstTestCases = "@ID-1001,@ID-1002"

def impactedTC = ""
def containerName = "${env.JOB_NAME}-${env.BUILD_NUMBER}".replace('-', '_').replace('/', '_')

pipeline {
    agent none
    
    stages {
        
        stage('Build') {
            agent {
                label 'Test-Linux'
            }
            
            steps {
                git branch: 'kataconnect', credentialsId: '7436167f-f5d5-45f6-ac3e-fd63bfe1c5b8', url: 'https://github.com/DryanLam/API_Jersey_Spring.git'
                
                sh "mvn clean package"
                stash includes: 'target/*.jar', name: 'app'
            }
            
            post {
                always {
                    cleanWs()
                }
            }
        } // End -State:Build
        
        stage('Deploy') {
            agent {
                label 'Test-Linux'
            }
            
            steps {
                unstash 'app'
                sh "docker run -t -d --rm  -p 7000:7000 --name ${containerName} maven:3.6.3-adoptopenjdk-8 /bin/bash"
                sh "docker cp target/WS-App-SNAPSHOT.jar ${containerName}:/home/"
                sh "docker exec ${containerName} java -jar /home/WS-App-SNAPSHOT.jar > /dev/null &"
            }
            
            post {
                always {
                    cleanWs()
                }
            }
        } // End - State:Deploy

        stage('Test') {

            stages {
                
                stage('Parallel') {
                    steps {
                        script {
                            def distList = distributeTCs(lstTestCases, expectedBuckets)
                            def prepTest = prepareTesting(distList)
                            parallel prepTest
                        }
                    }
                }  // End - Parallel
            }
        }// End - Test
        
        stage('TearDown') {
            agent {
                label 'Test-Linux'
            }
            steps {
                sh "docker rm -f \$(docker ps -q)"
            }
        }// End -Clean
        
    }
}


 
//================================================================================================
//                                    Test steps preparation
//================================================================================================
def distributeTCs(String lstTCs, int expectedBucket) {
    def result = [:]
    def TCs = lstTCs.split(',')
    expectedBucket = TCs.size() < expectedBucket ? TCs.size() : expectedBucket

    // Prepare bucket
    def buckets = []
    expectedBucket.times {
        buckets += "Test-Win-0" + (it + 1)
    }

    // Distribute TC into buckets
    def i = 0
    if (TCs.size() > 1) {
        TCs.each { tc ->
            result[buckets[i++]] = result[buckets[i]] == null ? tc : result[buckets[i]] + "," + tc
            i = i == expectedBucket ? 0 : i
        }
    } else {
        result[buckets[0]] = lstTCs
    }
    result
}


def prepareTesting(def distributedTCs) {
    def STAGES = [:]
    distributedTCs.each { b ->
        // name: lstTC
        STAGES[b.key] = {
            stage(b.key) {
			
				node("${b.key}") {
				   script {
						git branch: 'kataconnect', credentialsId: '7436167f-f5d5-45f6-ac3e-fd63bfe1c5b8', url: 'https://github.com/DryanLam/Kat.git'
						bat 'whoami'
						bat "katalonc -noSplash -runMode=console -projectPath=\"${env.WORKSPACE}\\KataConnect.prj\" -testSuitePath=\"Test Suites/Regression\" -browserType=\"Chrome\" -apiKey=%API_KEY% -g_API_URL=\"http://52.77.177.13:7000/api\" -g_TAGS=\"${b.value}\" --config -webui.autoUpdateDrivers=true"
					  }
				}
            }
        } // End - STAGES
    }
    STAGES
}


def prepareFolder(def distributedTCs){
    distributedTCs.each { b ->
        sh "cp -r AutoFW ${b.key}"
    }
}